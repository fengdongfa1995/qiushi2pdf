"""generate pdf from paper content"""

import os
import re
import subprocess
import shutil

import qiushi2pdf

class PDFGenerator:
    """generate pdf from paper content"""
    def __init__(self) -> None:
        resource_path = os.path.join(os.path.dirname(qiushi2pdf.__file__), 'resource')
        self.template_path = os.path.join(resource_path, 'template.tex')
        self.cls_path = os.path.join(resource_path, 'qiushi.cls')

        self.template_str = '==xx({})xx=='
        self.tex_target_path = 'current.tex'
        self.strong_re = re.compile(r'<strong>(.*?)</strong>')

        self.img_template = r"""
            \begin{figure}[htbp]
                \centering
                \includegraphics[width=0.7\linewidth]{==xx(path)xx==}
                \caption*{==xx(caption)xx==}
            \end{figure}
        """

    def copy_cls(self) -> None:
        """copy and paste cls file"""
        shutil.copy(self.cls_path, 'qiushi.cls')


    def gen_tex(self, content: dict) -> None:
        """generate tex source file
        Args:
            content: paper content generated by QiuShiCrawler.fetch_info
        """
        # read tex template file from disk
        with open(self.template_path, 'r', encoding='utf-8') as f:
            tex_code = f.read()

        # fill title, author, volume and qrcode
        for item in ['title', 'author', 'volume', 'qrcode']:
            info = content[item]
            tex_code = tex_code.replace(self.template_str.format(item), info)

        # fill paragraphs
        main_text = ''
        for item in content['content']:
            # If there is a picture, then insert it into text
            if (img_path := item.get('img')):
                _ = self.img_template.replace(self.template_str.format('path'), img_path)
                main_text += _.replace(self.template_str.format('caption'), item['text'])
            else:
                current_text = item['text']
                # generate section
                if current_text.startswith('<strong>') and current_text.endswith('</strong>'):
                    current_text = self.strong_re.sub(r'\\section*{\1}', current_text)

                main_text += current_text + '\n\n'

        tex_code = tex_code.replace(self.template_str.format('content'), main_text)

        # change <strong></strong> to \textbf{}
        tex_code = self.strong_re.sub(r'\\textbf{\1}', tex_code)

        # save tex source code to disk
        with open(self.tex_target_path, 'w', encoding='utf-8') as f:
            f.write(tex_code)

    def gen_pdf(self) -> None:
        """generate pdf file from tex file"""
        subprocess.run(['xelatex', f"{self.tex_target_path}"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            encoding="utf-8",
            check=True
            )


def main():
    """program entry"""
    url = 'http://www.qstheory.cn/dukan/qs/2022-06/01/c_1128695883.htm'

    crawler = qiushi2pdf.QiuShiCrawler()
    print('fetching paper contents...')
    paper_content = crawler.fetch_info(url)

    pdf_generator = PDFGenerator()
    print('generating tex file...')
    pdf_generator.gen_tex(paper_content)

    print('generating pdf file...')
    pdf_generator.gen_pdf()

    print('job done!')


if __name__ == '__main__':
    main()
